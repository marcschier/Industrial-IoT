/* 
 * Anomaly Detector Cognitive Service API
 *
 * The Anomaly Detector Service detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the time series, another is detecting last point with model trained by points before. By using this service, developers can discover incidents and establish a logic flow for root cause analysis.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnomalyDetectRequest
    /// </summary>
    [DataContract]
    public partial class AnomalyDetectRequest :  IEquatable<AnomalyDetectRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Granularity
        /// </summary>
        [DataMember(Name="Granularity", EmitDefaultValue=false)]
        public Granularity? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnomalyDetectRequest" /> class.
        /// </summary>
        /// <param name="series">Gets or sets time series data points. Points should be sorted by  timestamp in ascending order to match the anomaly detection result.  If the data is not sorted correctly or there is duplicated  timestamp, the API will not work. In such case, an error message  will be returned..</param>
        /// <param name="granularity">granularity.</param>
        /// <param name="customInterval">Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}..</param>
        /// <param name="period">Gets or sets optional argument, periodic value of a time series. If  the value is null or does not present, the API will determine the  period automatically..</param>
        /// <param name="maxAnomalyRatio">Gets or sets optional argument, advanced model parameter, max  anomaly ratio in a time series..</param>
        /// <param name="sensitivity">Gets or sets optional argument, advanced model parameter, between  0-99, the lower the value is, the larger the margin value will be  which means less anomalies will be accepted..</param>
        public AnomalyDetectRequest(List<TimeSeriesPoint> series = default(List<TimeSeriesPoint>), Granularity? granularity = default(Granularity?), int? customInterval = default(int?), int? period = default(int?), double? maxAnomalyRatio = default(double?), int? sensitivity = default(int?))
        {
            this.Series = series;
            this.Granularity = granularity;
            this.CustomInterval = customInterval;
            this.Period = period;
            this.MaxAnomalyRatio = maxAnomalyRatio;
            this.Sensitivity = sensitivity;
        }
        
        /// <summary>
        /// Gets or sets time series data points. Points should be sorted by  timestamp in ascending order to match the anomaly detection result.  If the data is not sorted correctly or there is duplicated  timestamp, the API will not work. In such case, an error message  will be returned.
        /// </summary>
        /// <value>Gets or sets time series data points. Points should be sorted by  timestamp in ascending order to match the anomaly detection result.  If the data is not sorted correctly or there is duplicated  timestamp, the API will not work. In such case, an error message  will be returned.</value>
        [DataMember(Name="Series", EmitDefaultValue=false)]
        public List<TimeSeriesPoint> Series { get; set; }


        /// <summary>
        /// Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}.
        /// </summary>
        /// <value>Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}.</value>
        [DataMember(Name="CustomInterval", EmitDefaultValue=false)]
        public int? CustomInterval { get; set; }

        /// <summary>
        /// Gets or sets optional argument, periodic value of a time series. If  the value is null or does not present, the API will determine the  period automatically.
        /// </summary>
        /// <value>Gets or sets optional argument, periodic value of a time series. If  the value is null or does not present, the API will determine the  period automatically.</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or sets optional argument, advanced model parameter, max  anomaly ratio in a time series.
        /// </summary>
        /// <value>Gets or sets optional argument, advanced model parameter, max  anomaly ratio in a time series.</value>
        [DataMember(Name="MaxAnomalyRatio", EmitDefaultValue=false)]
        public double? MaxAnomalyRatio { get; set; }

        /// <summary>
        /// Gets or sets optional argument, advanced model parameter, between  0-99, the lower the value is, the larger the margin value will be  which means less anomalies will be accepted.
        /// </summary>
        /// <value>Gets or sets optional argument, advanced model parameter, between  0-99, the lower the value is, the larger the margin value will be  which means less anomalies will be accepted.</value>
        [DataMember(Name="Sensitivity", EmitDefaultValue=false)]
        public int? Sensitivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnomalyDetectRequest {\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  CustomInterval: ").Append(CustomInterval).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  MaxAnomalyRatio: ").Append(MaxAnomalyRatio).Append("\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnomalyDetectRequest);
        }

        /// <summary>
        /// Returns true if AnomalyDetectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AnomalyDetectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnomalyDetectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Series == input.Series ||
                    this.Series != null &&
                    this.Series.SequenceEqual(input.Series)
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    (this.Granularity != null &&
                    this.Granularity.Equals(input.Granularity))
                ) && 
                (
                    this.CustomInterval == input.CustomInterval ||
                    (this.CustomInterval != null &&
                    this.CustomInterval.Equals(input.CustomInterval))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.MaxAnomalyRatio == input.MaxAnomalyRatio ||
                    (this.MaxAnomalyRatio != null &&
                    this.MaxAnomalyRatio.Equals(input.MaxAnomalyRatio))
                ) && 
                (
                    this.Sensitivity == input.Sensitivity ||
                    (this.Sensitivity != null &&
                    this.Sensitivity.Equals(input.Sensitivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.Granularity != null)
                    hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.CustomInterval != null)
                    hashCode = hashCode * 59 + this.CustomInterval.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.MaxAnomalyRatio != null)
                    hashCode = hashCode * 59 + this.MaxAnomalyRatio.GetHashCode();
                if (this.Sensitivity != null)
                    hashCode = hashCode * 59 + this.Sensitivity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
