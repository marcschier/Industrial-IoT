/* 
 * Anomaly Detector Cognitive Service API
 *
 * The Anomaly Detector Service detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the time series, another is detecting last point with model trained by points before. By using this service, developers can discover incidents and establish a logic flow for root cause analysis.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChangePointDetectResponse
    /// </summary>
    [DataContract]
    public partial class ChangePointDetectResponse :  IEquatable<ChangePointDetectResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePointDetectResponse" /> class.
        /// </summary>
        /// <param name="period">Frequency extracted from the series, zero means no recurrent pattern has been found..</param>
        /// <param name="isChangePoint">isChangePoint contains change point properties for each input point.             True means an anomaly either negative or positive has been detected.             The index of the array is consistent with the input series..</param>
        /// <param name="confidenceScores">the change point confidence of each point..</param>
        public ChangePointDetectResponse(int? period = default(int?), List<bool?> isChangePoint = default(List<bool?>), List<float?> confidenceScores = default(List<float?>))
        {
            this.Period = period;
            this.IsChangePoint = isChangePoint;
            this.ConfidenceScores = confidenceScores;
        }
        
        /// <summary>
        /// Frequency extracted from the series, zero means no recurrent pattern has been found.
        /// </summary>
        /// <value>Frequency extracted from the series, zero means no recurrent pattern has been found.</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// isChangePoint contains change point properties for each input point.             True means an anomaly either negative or positive has been detected.             The index of the array is consistent with the input series.
        /// </summary>
        /// <value>isChangePoint contains change point properties for each input point.             True means an anomaly either negative or positive has been detected.             The index of the array is consistent with the input series.</value>
        [DataMember(Name="IsChangePoint", EmitDefaultValue=false)]
        public List<bool?> IsChangePoint { get; set; }

        /// <summary>
        /// the change point confidence of each point.
        /// </summary>
        /// <value>the change point confidence of each point.</value>
        [DataMember(Name="ConfidenceScores", EmitDefaultValue=false)]
        public List<float?> ConfidenceScores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePointDetectResponse {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  IsChangePoint: ").Append(IsChangePoint).Append("\n");
            sb.Append("  ConfidenceScores: ").Append(ConfidenceScores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePointDetectResponse);
        }

        /// <summary>
        /// Returns true if ChangePointDetectResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePointDetectResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePointDetectResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.IsChangePoint == input.IsChangePoint ||
                    this.IsChangePoint != null &&
                    this.IsChangePoint.SequenceEqual(input.IsChangePoint)
                ) && 
                (
                    this.ConfidenceScores == input.ConfidenceScores ||
                    this.ConfidenceScores != null &&
                    this.ConfidenceScores.SequenceEqual(input.ConfidenceScores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.IsChangePoint != null)
                    hashCode = hashCode * 59 + this.IsChangePoint.GetHashCode();
                if (this.ConfidenceScores != null)
                    hashCode = hashCode * 59 + this.ConfidenceScores.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
