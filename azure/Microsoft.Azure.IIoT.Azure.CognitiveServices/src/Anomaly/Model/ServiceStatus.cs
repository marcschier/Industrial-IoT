/* 
 * Anomaly Detector Cognitive Service API
 *
 * The Anomaly Detector Service detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the time series, another is detecting last point with model trained by points before. By using this service, developers can discover incidents and establish a logic flow for root cause analysis.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceStatus
    /// </summary>
    [DataContract]
    public partial class ServiceStatus :  IEquatable<ServiceStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceStatus" /> class.
        /// </summary>
        /// <param name="service">service.</param>
        /// <param name="apiStatus">apiStatus.</param>
        /// <param name="apiStatusMessage">apiStatusMessage.</param>
        public ServiceStatus(string service = default(string), string apiStatus = default(string), string apiStatusMessage = default(string))
        {
            this.Service = service;
            this.ApiStatus = apiStatus;
            this.ApiStatusMessage = apiStatusMessage;
        }
        
        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="Service", EmitDefaultValue=false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets ApiStatus
        /// </summary>
        [DataMember(Name="ApiStatus", EmitDefaultValue=false)]
        public string ApiStatus { get; set; }

        /// <summary>
        /// Gets or Sets ApiStatusMessage
        /// </summary>
        [DataMember(Name="ApiStatusMessage", EmitDefaultValue=false)]
        public string ApiStatusMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceStatus {\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  ApiStatus: ").Append(ApiStatus).Append("\n");
            sb.Append("  ApiStatusMessage: ").Append(ApiStatusMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceStatus);
        }

        /// <summary>
        /// Returns true if ServiceStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.ApiStatus == input.ApiStatus ||
                    (this.ApiStatus != null &&
                    this.ApiStatus.Equals(input.ApiStatus))
                ) && 
                (
                    this.ApiStatusMessage == input.ApiStatusMessage ||
                    (this.ApiStatusMessage != null &&
                    this.ApiStatusMessage.Equals(input.ApiStatusMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.ApiStatus != null)
                    hashCode = hashCode * 59 + this.ApiStatus.GetHashCode();
                if (this.ApiStatusMessage != null)
                    hashCode = hashCode * 59 + this.ApiStatusMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
