/* 
 * Anomaly Detector Cognitive Service API
 *
 * The Anomaly Detector Service detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the time series, another is detecting last point with model trained by points before. By using this service, developers can discover incidents and establish a logic flow for root cause analysis.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChangePointDetectRequest
    /// </summary>
    [DataContract]
    public partial class ChangePointDetectRequest :  IEquatable<ChangePointDetectRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Granularity
        /// </summary>
        [DataMember(Name="Granularity", EmitDefaultValue=false)]
        public Granularity? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePointDetectRequest" /> class.
        /// </summary>
        /// <param name="series">Time series data points. Points should be sorted by timestamp in  ascending order to match the change point detection result..</param>
        /// <param name="granularity">granularity.</param>
        /// <param name="customInterval">Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}..</param>
        /// <param name="period">Optional argument, periodic value of a time series.             If the value is null or does not present,             the API will determine the period automatically..</param>
        /// <param name="stableTrendWindow">Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection..</param>
        /// <param name="threshold">Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is,             the larger the trend error will be which means less change point will be accepted..</param>
        public ChangePointDetectRequest(List<TimeSeriesPoint> series = default(List<TimeSeriesPoint>), Granularity? granularity = default(Granularity?), int? customInterval = default(int?), int? period = default(int?), int? stableTrendWindow = default(int?), float? threshold = default(float?))
        {
            this.Series = series;
            this.Granularity = granularity;
            this.CustomInterval = customInterval;
            this.Period = period;
            this.StableTrendWindow = stableTrendWindow;
            this.Threshold = threshold;
        }
        
        /// <summary>
        /// Time series data points. Points should be sorted by timestamp in  ascending order to match the change point detection result.
        /// </summary>
        /// <value>Time series data points. Points should be sorted by timestamp in  ascending order to match the change point detection result.</value>
        [DataMember(Name="Series", EmitDefaultValue=false)]
        public List<TimeSeriesPoint> Series { get; set; }


        /// <summary>
        /// Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}.
        /// </summary>
        /// <value>Custom interval is used to set non-standard time intervals, for example, if the series is 5 minutes, a model can  be defined as having {Granularity&#x3D;minutely} and {CustomInterval&#x3D;5}.</value>
        [DataMember(Name="CustomInterval", EmitDefaultValue=false)]
        public int? CustomInterval { get; set; }

        /// <summary>
        /// Optional argument, periodic value of a time series.             If the value is null or does not present,             the API will determine the period automatically.
        /// </summary>
        /// <value>Optional argument, periodic value of a time series.             If the value is null or does not present,             the API will determine the period automatically.</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection.
        /// </summary>
        /// <value>Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection.</value>
        [DataMember(Name="StableTrendWindow", EmitDefaultValue=false)]
        public int? StableTrendWindow { get; set; }

        /// <summary>
        /// Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is,             the larger the trend error will be which means less change point will be accepted.
        /// </summary>
        /// <value>Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is,             the larger the trend error will be which means less change point will be accepted.</value>
        [DataMember(Name="Threshold", EmitDefaultValue=false)]
        public float? Threshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePointDetectRequest {\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  CustomInterval: ").Append(CustomInterval).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  StableTrendWindow: ").Append(StableTrendWindow).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePointDetectRequest);
        }

        /// <summary>
        /// Returns true if ChangePointDetectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePointDetectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePointDetectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Series == input.Series ||
                    this.Series != null &&
                    this.Series.SequenceEqual(input.Series)
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    (this.Granularity != null &&
                    this.Granularity.Equals(input.Granularity))
                ) && 
                (
                    this.CustomInterval == input.CustomInterval ||
                    (this.CustomInterval != null &&
                    this.CustomInterval.Equals(input.CustomInterval))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.StableTrendWindow == input.StableTrendWindow ||
                    (this.StableTrendWindow != null &&
                    this.StableTrendWindow.Equals(input.StableTrendWindow))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.Granularity != null)
                    hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.CustomInterval != null)
                    hashCode = hashCode * 59 + this.CustomInterval.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.StableTrendWindow != null)
                    hashCode = hashCode * 59 + this.StableTrendWindow.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
