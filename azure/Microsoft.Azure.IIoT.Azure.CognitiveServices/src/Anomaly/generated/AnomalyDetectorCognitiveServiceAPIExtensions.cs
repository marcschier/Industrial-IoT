// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AnomalyDetectorCognitiveServiceAPI.
    /// </summary>
    public static partial class AnomalyDetectorCognitiveServiceAPIExtensions
    {
            /// <summary>
            /// Detects anomaly in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            public static LastDetectResponse LastDetect(this IAnomalyDetectorCognitiveServiceAPI operations, AnomalyDetectRequest body = default(AnomalyDetectRequest))
            {
                return operations.LastDetectAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detects anomaly in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LastDetectResponse> LastDetectAsync(this IAnomalyDetectorCognitiveServiceAPI operations, AnomalyDetectRequest body = default(AnomalyDetectRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LastDetectWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detects anomaly in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            public static EntireDetectResponse EntireDetect(this IAnomalyDetectorCognitiveServiceAPI operations, AnomalyDetectRequest body = default(AnomalyDetectRequest))
            {
                return operations.EntireDetectAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detects anomaly in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntireDetectResponse> EntireDetectAsync(this IAnomalyDetectorCognitiveServiceAPI operations, AnomalyDetectRequest body = default(AnomalyDetectRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EntireDetectWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detects trend change point in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            public static ChangePointDetectResponse ChangePointDetect(this IAnomalyDetectorCognitiveServiceAPI operations, ChangePointDetectRequest body = default(ChangePointDetectRequest))
            {
                return operations.ChangePointDetectAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detects trend change point in the time series given the provided model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The time series to analyze.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChangePointDetectResponse> ChangePointDetectAsync(this IAnomalyDetectorCognitiveServiceAPI operations, ChangePointDetectRequest body = default(ChangePointDetectRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangePointDetectWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void IsReady(this IAnomalyDetectorCognitiveServiceAPI operations)
            {
                operations.IsReadyAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IsReadyAsync(this IAnomalyDetectorCognitiveServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IsReadyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServiceStatus GetStatus(this IAnomalyDetectorCognitiveServiceAPI operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceStatus> GetStatusAsync(this IAnomalyDetectorCognitiveServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
