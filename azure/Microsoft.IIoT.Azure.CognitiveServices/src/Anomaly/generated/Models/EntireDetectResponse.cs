// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary/>
    public partial class EntireDetectResponse
    {
        /// <summary>
        /// Initializes a new instance of the EntireDetectResponse class.
        /// </summary>
        public EntireDetectResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EntireDetectResponse class.
        /// </summary>
        /// <param name="period">Gets or sets frequency extracted from the
        /// series, zero means no
        /// recurrent pattern has been found.</param>
        /// <param name="expectedValues">Gets or sets expectedValues contain
        /// expected value for each input
        /// point. The index of the array is consistent with the input
        /// series.</param>
        /// <param name="upperMargins">Gets or sets upperMargins contain upper
        /// margin of each input point.
        /// UpperMargin is used to calculate upperBoundary, which equals to
        /// expectedValue + (100 - marginScale)*upperMargin. Anomalies in
        /// response can be filtered by upperBoundary and lowerBoundary. By
        /// adjusting marginScale value, less significant anomalies can be
        /// filtered in client side. The index of the array is consistent with
        /// the input series.</param>
        /// <param name="lowerMargins">Gets or sets lowerMargins contain lower
        /// margin of each input point.
        /// LowerMargin is used to calculate lowerBoundary, which equals to
        /// expectedValue - (100 - marginScale)*lowerMargin. Points between the
        /// boundary can be marked as normal ones in client side. The index of
        /// the array is consistent with the input series.</param>
        /// <param name="isAnomaly">Gets or sets isAnomaly contains anomaly
        /// properties for each input
        /// point. True means an anomaly either negative or positive has been
        /// detected. The index of the array is consistent with the input
        /// series.</param>
        /// <param name="isNegativeAnomaly">Gets or sets isNegativeAnomaly
        /// contains anomaly status in negative
        /// direction for each input point. True means a negative anomaly has
        /// been detected. A negative anomaly means the point is detected as an
        /// anomaly and its real value is smaller than the expected one. The
        /// index of the array is consistent with the input series.</param>
        /// <param name="isPositiveAnomaly">Gets or sets isPositiveAnomaly
        /// contain anomaly status in positive
        /// direction for each input point. True means a positive anomaly has
        /// been detected. A positive anomaly means the point is detected as an
        /// anomaly and its real value is larger than the expected one. The
        /// index of the array is consistent with the input series.</param>
        public EntireDetectResponse(int? period = default(int?), IList<double?> expectedValues = default(IList<double?>), IList<double?> upperMargins = default(IList<double?>), IList<double?> lowerMargins = default(IList<double?>), IList<bool?> isAnomaly = default(IList<bool?>), IList<bool?> isNegativeAnomaly = default(IList<bool?>), IList<bool?> isPositiveAnomaly = default(IList<bool?>))
        {
            Period = period;
            ExpectedValues = expectedValues;
            UpperMargins = upperMargins;
            LowerMargins = lowerMargins;
            IsAnomaly = isAnomaly;
            IsNegativeAnomaly = isNegativeAnomaly;
            IsPositiveAnomaly = isPositiveAnomaly;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets frequency extracted from the series, zero means no
        /// recurrent pattern has been found.
        /// </summary>
        [JsonProperty(PropertyName = "Period")]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or sets expectedValues contain expected value for each input
        /// point. The index of the array is consistent with the input series.
        /// </summary>
        [JsonProperty(PropertyName = "ExpectedValues")]
        public IList<double?> ExpectedValues { get; set; }

        /// <summary>
        /// Gets or sets upperMargins contain upper margin of each input point.
        /// UpperMargin is used to calculate upperBoundary, which equals to
        /// expectedValue + (100 - marginScale)*upperMargin. Anomalies in
        /// response can be filtered by upperBoundary and lowerBoundary. By
        /// adjusting marginScale value, less significant anomalies can be
        /// filtered in client side. The index of the array is consistent with
        /// the input series.
        /// </summary>
        [JsonProperty(PropertyName = "UpperMargins")]
        public IList<double?> UpperMargins { get; set; }

        /// <summary>
        /// Gets or sets lowerMargins contain lower margin of each input point.
        /// LowerMargin is used to calculate lowerBoundary, which equals to
        /// expectedValue - (100 - marginScale)*lowerMargin. Points between the
        /// boundary can be marked as normal ones in client side. The index of
        /// the array is consistent with the input series.
        /// </summary>
        [JsonProperty(PropertyName = "LowerMargins")]
        public IList<double?> LowerMargins { get; set; }

        /// <summary>
        /// Gets or sets isAnomaly contains anomaly properties for each input
        /// point. True means an anomaly either negative or positive has been
        /// detected. The index of the array is consistent with the input
        /// series.
        /// </summary>
        [JsonProperty(PropertyName = "IsAnomaly")]
        public IList<bool?> IsAnomaly { get; set; }

        /// <summary>
        /// Gets or sets isNegativeAnomaly contains anomaly status in negative
        /// direction for each input point. True means a negative anomaly has
        /// been detected. A negative anomaly means the point is detected as an
        /// anomaly and its real value is smaller than the expected one. The
        /// index of the array is consistent with the input series.
        /// </summary>
        [JsonProperty(PropertyName = "IsNegativeAnomaly")]
        public IList<bool?> IsNegativeAnomaly { get; set; }

        /// <summary>
        /// Gets or sets isPositiveAnomaly contain anomaly status in positive
        /// direction for each input point. True means a positive anomaly has
        /// been detected. A positive anomaly means the point is detected as an
        /// anomaly and its real value is larger than the expected one. The
        /// index of the array is consistent with the input series.
        /// </summary>
        [JsonProperty(PropertyName = "IsPositiveAnomaly")]
        public IList<bool?> IsPositiveAnomaly { get; set; }

    }
}
